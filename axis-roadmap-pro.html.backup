<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Axis Roadmap Pro</title>
  <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
  <script src="https://html2canvas.hertzen.com/dist/html2canvas.min.js"></script>
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: #333; min-height: 100vh; }
    
    .header { background: rgba(255,255,255,0.95); backdrop-filter: blur(10px); padding: 20px; box-shadow: 0 2px 20px rgba(0,0,0,0.1); position: sticky; top: 0; z-index: 100; }
    .header-content { max-width: 1200px; margin: 0 auto; display: flex; justify-content: space-between; align-items: center; }
    .logo { font-size: 24px; font-weight: 700; color: #4f46e5; }
    .nav { display: flex; gap: 20px; }
    .nav button { background: none; border: 2px solid #4f46e5; color: #4f46e5; padding: 8px 16px; border-radius: 6px; cursor: pointer; font-weight: 500; transition: all 0.2s; }
    .nav button:hover, .nav button.active { background: #4f46e5; color: white; }
    
    .container { max-width: 1200px; margin: 20px auto; padding: 0 20px; }
    .controls { background: rgba(255,255,255,0.95); backdrop-filter: blur(10px); padding: 20px; border-radius: 12px; margin-bottom: 20px; box-shadow: 0 4px 30px rgba(0,0,0,0.1); }
    .controls-row { display: flex; gap: 15px; align-items: center; flex-wrap: wrap; }
    .btn { background: linear-gradient(45deg, #4f46e5, #7c3aed); color: white; border: none; padding: 10px 20px; border-radius: 8px; cursor: pointer; font-weight: 500; transition: all 0.2s; }
    .btn:hover { transform: translateY(-2px); box-shadow: 0 4px 15px rgba(79, 70, 229, 0.3); }
    .btn-secondary { background: linear-gradient(45deg, #6b7280, #4b5563); }
    .btn-coach { background: linear-gradient(45deg, #f59e0b, #d97706); }
    
    .view-content { background: rgba(255,255,255,0.95); backdrop-filter: blur(10px); border-radius: 12px; padding: 30px; min-height: 600px; box-shadow: 0 4px 30px rgba(0,0,0,0.1); }
    
    .flow-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }
    
    .card { background: white; border-radius: 8px; padding: 15px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); cursor: pointer; transition: all 0.2s; border: 2px solid transparent; }
    .card:hover { transform: translateY(-2px); box-shadow: 0 4px 15px rgba(0,0,0,0.15); border-color: #4f46e5; }
    .card-title { font-weight: 600; font-size: 16px; margin-bottom: 8px; color: #1f2937; }
    .card-desc { color: #6b7280; font-size: 14px; margin-bottom: 12px; line-height: 1.4; }
    .card-meta { display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 8px; }
    .card-status { padding: 4px 12px; border-radius: 20px; font-size: 12px; font-weight: 500; text-transform: uppercase; }
    .status-planned { background: #e5e7eb; color: #374151; }
    .status-progress { background: #fef3c7; color: #92400e; }
    .status-done { background: #d1fae5; color: #065f46; }
    
    .card-tags { display: flex; gap: 6px; flex-wrap: wrap; }
    .tag { padding: 3px 8px; background: #ede9fe; color: #5b21b6; border-radius: 12px; font-size: 11px; font-weight: 500; }
    .tag.blocked { background: #fee2e2; color: #dc2626; }
    .tag.priority { background: #fef3c7; color: #92400e; }
    
    .coach-suggest-btn { background: linear-gradient(45deg, #f59e0b, #d97706); color: white; border: none; padding: 4px 8px; border-radius: 4px; font-size: 11px; cursor: pointer; margin-left: 8px; }
    .coach-suggest-btn:hover { opacity: 0.8; }
    
    .drawer { position: fixed; right: 0; top: 0; height: 100vh; width: 400px; background: white; box-shadow: -5px 0 25px rgba(0,0,0,0.2); transform: translateX(100%); transition: transform 0.3s; z-index: 1000; display: flex; flex-direction: column; }
    .drawer.open { transform: translateX(0); }
    .drawer-header { padding: 20px; border-bottom: 1px solid #e5e7eb; background: #f9fafb; }
    .drawer-title { font-size: 18px; font-weight: 600; color: #1f2937; }
    .drawer-close { position: absolute; right: 15px; top: 15px; background: none; border: none; font-size: 24px; cursor: pointer; color: #6b7280; }
    .drawer-content { flex: 1; padding: 20px; overflow-y: auto; }
    .drawer-footer { padding: 20px; border-top: 1px solid #e5e7eb; background: #f9fafb; display: flex; gap: 10px; }
    
    .form-group { margin-bottom: 20px; }
    .form-label { display: block; margin-bottom: 8px; font-weight: 500; color: #374151; }
    .form-input, .form-select, .form-textarea { width: 100%; padding: 10px; border: 2px solid #e5e7eb; border-radius: 6px; font-size: 14px; transition: border-color 0.2s; }
    .form-input:focus, .form-select:focus, .form-textarea:focus { outline: none; border-color: #4f46e5; }
    .form-textarea { min-height: 80px; resize: vertical; }
    
    .modal { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); display: none; align-items: center; justify-content: center; z-index: 2000; }
    .modal.show { display: flex; }
    .modal-content { background: white; border-radius: 12px; padding: 30px; width: 90%; max-width: 500px; box-shadow: 0 10px 40px rgba(0,0,0,0.2); }
    
    .coach-window { position: fixed; right: 20px; top: 120px; width: 350px; background: white; border-radius: 12px; box-shadow: 0 10px 40px rgba(0,0,0,0.2); z-index: 1500; transform: translateX(100%); transition: all 0.3s; max-height: calc(100vh - 140px); display: flex; flex-direction: column; }
    .coach-window.open { transform: translateX(0); }
    .coach-header { background: linear-gradient(45deg, #f59e0b, #d97706); color: white; padding: 15px; border-radius: 12px 12px 0 0; display: flex; justify-content: space-between; align-items: center; }
    .coach-title { font-weight: 600; font-size: 16px; }
    .coach-controls { display: flex; gap: 8px; }
    .coach-btn { background: rgba(255,255,255,0.2); border: none; color: white; width: 24px; height: 24px; border-radius: 4px; cursor: pointer; display: flex; align-items: center; justify-content: center; }
    .coach-content { flex: 1; overflow-y: auto; display: flex; flex-direction: column; }
    .coach-section { padding: 15px; border-bottom: 1px solid #e5e7eb; }
    .coach-ops { display: flex; flex-direction: column; gap: 8px; }
    .coach-op-btn { background: linear-gradient(45deg, #4f46e5, #7c3aed); color: white; border: none; padding: 8px 12px; border-radius: 6px; font-size: 12px; cursor: pointer; text-align: left; transition: all 0.2s; }
    
    /* Swimlanes View */
    .swimlane { margin-bottom: 30px; background: white; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 8px rgba(0,0,0,0.1); }
    .lane-header { background: linear-gradient(45deg, #4f46e5, #7c3aed); color: white; padding: 15px 20px; font-size: 16px; font-weight: 600; }
    .lane-items { padding: 20px; display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 15px; }
    
    /* Kanban Board View */
    .kanban-board { display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px; height: 100%; }
    .kanban-column { background: #f8fafc; border-radius: 8px; padding: 15px; display: flex; flex-direction: column; }
    .column-header { background: white; margin: -15px -15px 15px -15px; padding: 15px; border-radius: 8px 8px 0 0; font-size: 14px; font-weight: 600; text-align: center; color: #374151; border-bottom: 2px solid #e5e7eb; }
    .column-items { flex: 1; display: flex; flex-direction: column; gap: 12px; }
    .kanban-column .card { margin: 0; background: white; }
    
    /* Milestones View */
    .milestone-section { margin-bottom: 30px; background: white; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 8px rgba(0,0,0,0.1); }
    .milestone-header { background: linear-gradient(45deg, #059669, #047857); color: white; padding: 20px; }
    .milestone-header h3 { font-size: 18px; font-weight: 600; margin-bottom: 10px; }
    .milestone-progress { display: flex; align-items: center; gap: 15px; }
    .milestone-progress span { font-size: 14px; font-weight: 500; min-width: 80px; }
    .progress-bar { flex: 1; height: 8px; background: rgba(255,255,255,0.3); border-radius: 4px; overflow: hidden; }
    .progress-fill { height: 100%; background: white; border-radius: 4px; transition: width 0.3s; }
    .milestone-items { padding: 20px; display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 15px; }
    
    /* Roadmap Card for all views */
    .roadmap-card { background: white; border-radius: 8px; padding: 15px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); transition: all 0.2s; border: 2px solid transparent; }
    .roadmap-card:hover { transform: translateY(-2px); box-shadow: 0 4px 15px rgba(0,0,0,0.15); border-color: #4f46e5; }
    .roadmap-card.blocked { border-color: #dc2626; background: #fef2f2; }
    .roadmap-card.done { opacity: 0.7; }
    .roadmap-card h3 { font-size: 16px; font-weight: 600; margin-bottom: 8px; color: #1f2937; }
    .roadmap-card p { color: #6b7280; font-size: 14px; margin-bottom: 12px; line-height: 1.4; }
    .card-content { margin-bottom: 15px; }
    .card-meta { font-size: 12px; color: #6b7280; margin-bottom: 10px; }
    .meta-label { font-weight: 500; }
    .card-tags { display: flex; gap: 6px; flex-wrap: wrap; margin-bottom: 12px; }
    .card-actions { display: flex; gap: 8px; }
    .card-actions button { padding: 6px 12px; border: none; border-radius: 4px; font-size: 12px; cursor: pointer; transition: all 0.2s; }
    .btn-edit { background: #3b82f6; color: white; }
    .btn-coach { background: #f59e0b; color: white; }
    .btn-delete { background: #ef4444; color: white; }
    .card-actions button:hover { opacity: 0.8; transform: translateY(-1px); }
  </style>
</head>
<body>
  <div class="header">
    <div class="header-content">
      <div class="logo">🎯 Axis Roadmap Pro</div>
      <div class="nav">
        <button id="flowBtn" class="view-btn active" onclick="setView('flow')">Flow</button>
        <button id="swimBtn" class="view-btn" onclick="setView('swimlanes')">Swimlanes</button>
        <button id="boardBtn" class="view-btn" onclick="setView('board')">Board</button>
        <button id="milestonesBtn" class="view-btn" onclick="setView('milestones')">Milestones</button>
        <button id="coachBtn" class="btn-coach" onclick="toggleCoach()">🤖 Coach</button>
        <button id="settingsBtn" class="btn-secondary">⚙️</button>
      </div>
    </div>
  </div>

  <div class="container">
    <div class="controls">
      <div class="controls-row">
        <button id="addItemBtn" class="btn">+ Add Item</button>
        <button id="exportBtn" class="btn btn-secondary">📸 Export PNG</button>
        <button id="syncBtn" class="btn btn-secondary">🔄 Sync</button>
        <button id="depsBtn" class="btn btn-secondary">🔗 Show Dependencies</button>
      </div>
    </div>

    <div class="view-content">
      <div id="flowView" class="flow-grid"></div>
    </div>
  </div>

  <!-- Item Editor Drawer -->
  <div id="drawer" class="drawer">
    <div class="drawer-header">
      <div class="drawer-title">Edit Item</div>
      <button id="closeDrawer" class="drawer-close">×</button>
    </div>
    <div class="drawer-content">
      <div class="form-group">
        <label class="form-label">Title</label>
        <input id="f-title" class="form-input" type="text" placeholder="Item title">
      </div>
      <div class="form-group">
        <label class="form-label">Description</label>
        <textarea id="f-desc" class="form-textarea" placeholder="Item description"></textarea>
      </div>
      <div class="form-group">
        <label class="form-label">Status</label>
        <select id="f-status" class="form-select">
          <option value="planned">Planned</option>
          <option value="progress">In Progress</option>
          <option value="done">Done</option>
        </select>
      </div>
      <div class="form-group">
        <label class="form-label">Milestone</label>
        <select id="f-milestone" class="form-select">
          <option value="mvp">MVP</option>
          <option value="beta">Beta</option>
          <option value="v1">Version 1.0</option>
          <option value="v2">Version 2.0</option>
        </select>
      </div>
      <div class="form-group">
        <label class="form-label">Lane</label>
        <select id="f-lane" class="form-select">
          <option value="PDF Engine">PDF Engine</option>
          <option value="AI/OCR">AI/OCR</option>
          <option value="UI/UX">UI/UX</option>
          <option value="Pipeline">Pipeline</option>
          <option value="Infrastructure">Infrastructure</option>
        </select>
      </div>
      <div class="form-group">
        <label class="form-label">Tags (comma-separated)</label>
        <input id="f-tags" class="form-input" type="text" placeholder="e.g. priority, blocked">
      </div>
      <div class="form-group">
        <label class="form-label">Dependencies (comma-separated IDs)</label>
        <input id="f-deps" class="form-input" type="text" placeholder="e.g. item-1, item-2">
      </div>
    </div>
    <div class="drawer-footer">
      <button id="deleteItem" class="btn btn-secondary">Delete</button>
      <button id="saveItem" class="btn">Save</button>
    </div>
  </div>

  <!-- Settings Modal -->
  <div id="settingsModal" class="modal">
    <div class="modal-content">
      <div>Settings</div>
      <div class="form-group">
        <label class="form-label">Project ID</label>
        <input id="p-id" class="form-input" type="text" placeholder="teambeam-roadmap">
      </div>
      <div>
        <button id="closeSettings" class="btn btn-secondary">Cancel</button>
        <button id="saveSettings" class="btn">Save</button>
      </div>
    </div>
  </div>

  <!-- Coach Window -->
  <div id="coachWindow" class="coach-window">
    <div class="coach-header">
      <div class="coach-title">🤖 Roadmap Coach</div>
      <div class="coach-controls">
        <button class="coach-btn coach-close">×</button>
      </div>
    </div>
    <div class="coach-content">
      <div id="coach-top" class="coach-section"></div>
      <div id="coach-context" class="coach-section"></div>
      <div id="coach-ops" class="coach-section"></div>
    </div>
  </div>

  <script>
    // ============== CONFIG ==============
    const COACH_ON = true;

    let cfg = {
      project_id: 'teambeam-roadmap',
      supabase_url: 'https://zwlwzvkwjmuznjdlylkx.supabase.co',
      supabase_key: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inp3bHd6dmtham11em5qZGx5bGt4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjUzMTA4MzUsImV4cCI6MjA0MDg4NjgzNX0.Zm8gT9YOhH8mVNyoF3T_7o2GXY0q3E_Y6G0JU6wPNlE'
    };

    let sb = null;
    let depDim = false;

    // ============== DEFAULT DATA ==============
    const DEFAULT_DATA = [
      {
        id: 'item-1',
        title: 'PDF Rendering Engine',
        desc: 'Core PDF viewing and manipulation engine with zoom, pan, and annotation support',
        status: 'progress',
        milestone: 'mvp',
        lane: 'PDF Engine',
        tags: ['priority'],
        deps: []
      },
      {
        id: 'item-2',
        title: 'Annotation System',
        desc: 'Complete annotation framework supporting text, shapes, stamps, and measurements',
        status: 'planned',
        milestone: 'mvp',
        lane: 'PDF Engine',
        tags: [],
        deps: ['item-1']
      },
      {
        id: 'item-3',
        title: 'OCR Integration',
        desc: 'Tesseract-based OCR with language support and text extraction capabilities',
        status: 'planned',
        milestone: 'beta',
        lane: 'AI/OCR',
        tags: [],
        deps: ['item-1']
      },
      {
        id: 'item-4',
        title: 'User Interface Design',
        desc: 'Modern, responsive UI with dark mode, accessibility, and user preferences',
        status: 'progress',
        milestone: 'mvp',
        lane: 'UI/UX',
        tags: ['priority'],
        deps: []
      },
      {
        id: 'item-5',
        title: 'File Management',
        desc: 'Project organization, file browser, recent files, and workspace management',
        status: 'planned',
        milestone: 'mvp',
        lane: 'UI/UX',
        tags: [],
        deps: ['item-4']
      },
      {
        id: 'item-6',
        title: 'Pipeline Executor',
        desc: 'Core pipeline execution engine with step validation and error handling',
        status: 'done',
        milestone: 'mvp',
        lane: 'Pipeline',
        tags: [],
        deps: []
      },
      {
        id: 'item-7',
        title: 'Built-in Pipeline Steps',
        desc: 'Standard library of pipeline steps for common operations and transformations',
        status: 'progress',
        milestone: 'mvp',
        lane: 'Pipeline',
        tags: [],
        deps: ['item-6']
      },
      {
        id: 'item-8',
        title: 'Custom Scripting',
        desc: 'JavaScript execution environment for custom pipeline logic and automation',
        status: 'planned',
        milestone: 'beta',
        lane: 'Pipeline',
        tags: [],
        deps: ['item-6']
      },
      {
        id: 'item-9',
        title: 'Database Integration',
        desc: 'Supabase integration for data persistence, sync, and collaborative features',
        status: 'progress',
        milestone: 'mvp',
        lane: 'Infrastructure',
        tags: [],
        deps: []
      },
      {
        id: 'item-10',
        title: 'Authentication System',
        desc: 'User accounts, login, permissions, and workspace sharing capabilities',
        status: 'planned',
        milestone: 'beta',
        lane: 'Infrastructure',
        tags: [],
        deps: ['item-9']
      },
      {
        id: 'item-11',
        title: 'Real-time Collaboration',
        desc: 'Live collaborative editing with conflict resolution and presence indicators',
        status: 'planned',
        milestone: 'v1',
        lane: 'Infrastructure',
        tags: [],
        deps: ['item-10']
      },
      {
        id: 'item-12',
        title: 'Export System',
        desc: 'Multiple export formats including PDF, PNG, SVG, and data exports',
        status: 'planned',
        milestone: 'mvp',
        lane: 'PDF Engine',
        tags: [],
        deps: ['item-1', 'item-2']
      },
      {
        id: 'item-13',
        title: 'Measurement Tools',
        desc: 'Precision measurement tools with calibration, units, and scale factors',
        status: 'planned',
        milestone: 'beta',
        lane: 'PDF Engine',
        tags: [],
        deps: ['item-2']
      },
      {
        id: 'item-14',
        title: 'Batch Processing',
        desc: 'Automated batch operations for multiple files and bulk transformations',
        status: 'planned',
        milestone: 'beta',
        lane: 'Pipeline',
        tags: [],
        deps: ['item-7']
      },
      {
        id: 'item-15',
        title: 'API Integration',
        desc: 'REST API for external integrations and webhook support',
        status: 'planned',
        milestone: 'v1',
        lane: 'Infrastructure',
        tags: [],
        deps: ['item-9']
      },
      {
        id: 'item-16',
        title: 'Mobile Support',
        desc: 'Responsive design and mobile app for field work and remote access',
        status: 'planned',
        milestone: 'v2',
        lane: 'UI/UX',
        tags: [],
        deps: ['item-4', 'item-5']
      },
      {
        id: 'item-17',
        title: 'Advanced AI Features',
        desc: 'Computer vision, automatic detection, and intelligent suggestions',
        status: 'planned',
        milestone: 'v2',
        lane: 'AI/OCR',
        tags: [],
        deps: ['item-3']
      },
      {
        id: 'item-18',
        title: 'Performance Optimization',
        desc: 'Memory management, caching, and performance profiling tools',
        status: 'planned',
        milestone: 'v1',
        lane: 'Infrastructure',
        tags: [],
        deps: ['item-1']
      },
      {
        id: 'item-19',
        title: 'Testing Framework',
        desc: 'Comprehensive testing suite with unit, integration, and E2E tests',
        status: 'planned',
        milestone: 'mvp',
        lane: 'Infrastructure',
        tags: ['blocked'],
        deps: []
      },
      {
        id: 'item-20',
        title: 'Documentation System',
        desc: 'User guides, API docs, and interactive tutorials',
        status: 'planned',
        milestone: 'beta',
        lane: 'UI/UX',
        tags: [],
        deps: ['item-15']
      }
    ];

    // ============== STATE ==============
    let state = {
      view: 'flow',
      items: [...DEFAULT_DATA],
      coach: {
        active: false,
        minimized: false,
        selectedItemId: null
      }
    };

    let currentEdit = null;
    const drawer = document.getElementById('drawer');

    // ============== UTILITIES ==============
    function saveState() {
      localStorage.setItem('axis-roadmap-state', JSON.stringify(state));
    }

    function loadState() {
      const saved = localStorage.getItem('axis-roadmap-state');
      if (saved) {
        const parsed = JSON.parse(saved);
        state.items = parsed.items || [...DEFAULT_DATA];
        state.view = parsed.view || 'flow';
        state.coach = parsed.coach || { active: false, minimized: false, selectedItemId: null };
      }
    }

    function saveCfg() {
      localStorage.setItem('axis-roadmap-cfg', JSON.stringify(cfg));
    }

    function loadCfg() {
      const saved = localStorage.getItem('axis-roadmap-cfg');
      if (saved) {
        cfg = { ...cfg, ...JSON.parse(saved) };
      }
    }

    // ============== SUPABASE ==============
    function initSupabase() {
      if (cfg.supabase_url && cfg.supabase_key) {
        try {
          sb = window.supabase.createClient(cfg.supabase_url, cfg.supabase_key);
        } catch (err) {
          console.error('Supabase init failed:', err);
          sb = null;
        }
      }
    }

    async function tryLoadFromSupabase() {
      if (!sb || !cfg.project_id) return false;
      try {
        const { data, error } = await sb
          .from('roadmaps')
          .select('data')
          .eq('project_id', cfg.project_id)
          .single();
        if (error) throw error;
        if (data?.data) {
          state.items = data.data;
          saveState();
          return true;
        }
      } catch (err) {
        console.error('Supabase load failed:', err);
      }
      return false;
    }

    async function saveToSupabase() {
      if (!sb || !cfg.project_id) return false;
      try {
        const { error } = await sb
          .from('roadmaps')
          .upsert({
            project_id: cfg.project_id,
            data: state.items,
            updated_at: new Date().toISOString()
          });
        if (error) throw error;
        return true;
      } catch (err) {
        console.error('Supabase save failed:', err);
        return false;
      }
    }

    // ============== RENDERING ==============

    function renderCard(item) {
      const blockedClass = item.tags?.includes('blocked') ? 'blocked' : '';
      const statusClass = `status-${item.status}`;
      const tags = (item.tags || []).map(tag => 
        `<span class="tag ${tag}">${tag}</span>`
      ).join('');
      
      const coachBtn = COACH_ON ? 
        `<button class="coach-suggest-btn" data-item-id="${item.id}">🤖</button>` : '';

      return `
        <div class="card ${statusClass} ${blockedClass}" data-id="${item.id}">
          <div class="card-title">${item.title}</div>
          <div class="card-desc">${item.desc}</div>
          <div class="card-meta">
            <span class="card-status ${statusClass}">${item.status}</span>
            <div class="card-tags">${tags}</div>
            ${coachBtn}
          </div>
          <div style="font-size: 11px; color: #6b7280; margin-top: 8px;">
            ${item.lane} • ${item.milestone}
          </div>
        </div>
      `;
    }

    function renderFlow() {
      const container = document.getElementById('flowView');
      if (state.items.length === 0) {
        container.innerHTML = '<p class="no-items">No roadmap items yet. Click "Add Item" to get started!</p>';
        return;
      }
      container.innerHTML = state.items.map(renderCard).join('');
    }

    function renderSwimlanes() {
      const container = document.getElementById('flowView');
      const lanes = [...new Set(state.items.map(item => item.lane))];
      
      const html = lanes.map(lane => {
        const laneItems = state.items.filter(item => item.lane === lane);
        return `
          <div class="swimlane">
            <h3 class="lane-header">${lane}</h3>
            <div class="lane-items">
              ${laneItems.map(renderCard).join('')}
            </div>
          </div>
        `;
      }).join('');
      
      container.innerHTML = html;
    }

    function renderBoard() {
      const container = document.getElementById('flowView');
      const statuses = ['planned', 'progress', 'done'];
      
      const html = `
        <div class="kanban-board">
          ${statuses.map(status => {
            const statusItems = state.items.filter(item => item.status === status);
            const statusLabel = status === 'progress' ? 'In Progress' : 
                              status === 'planned' ? 'Planned' : 'Done';
            return `
              <div class="kanban-column">
                <h3 class="column-header">${statusLabel} (${statusItems.length})</h3>
                <div class="column-items">
                  ${statusItems.map(renderCard).join('')}
                </div>
              </div>
            `;
          }).join('')}
        </div>
      `;
      
      container.innerHTML = html;
    }

    function renderMilestones() {
      const container = document.getElementById('flowView');
      const milestones = [...new Set(state.items.map(item => item.milestone))];
      
      const html = milestones.map(milestone => {
        const milestoneItems = state.items.filter(item => item.milestone === milestone);
        const completed = milestoneItems.filter(item => item.status === 'done').length;
        const total = milestoneItems.length;
        const progress = total > 0 ? Math.round((completed / total) * 100) : 0;
        
        return `
          <div class="milestone-section">
            <div class="milestone-header">
              <h3>${milestone}</h3>
              <div class="milestone-progress">
                <span>${progress}% (${completed}/${total})</span>
                <div class="progress-bar">
                  <div class="progress-fill" style="width: ${progress}%"></div>
                </div>
              </div>
            </div>
            <div class="milestone-items">
              ${milestoneItems.map(renderCard).join('')}
            </div>
          </div>
        `;
      }).join('');
      
      container.innerHTML = html;
    }

    function render() {
      switch (state.view) {
        case 'flow': renderFlow(); break;
        case 'swimlanes': renderSwimlanes(); break;
        case 'board': renderBoard(); break;
        case 'milestones': renderMilestones(); break;
        default: renderFlow();
      }
      saveState();
    }

    function setView(viewName) {
      // Remove active class from all view buttons
      document.querySelectorAll('.view-btn').forEach(btn => btn.classList.remove('active'));
      // Add active class to selected button  
      document.querySelector(`[onclick="setView('${viewName}')"]`).classList.add('active');
      
      state.view = viewName;
      render();
    }

    // ============== UTILITY FUNCTIONS ==============
    function exportToPNG() {
      // Simple implementation - could be enhanced with html2canvas
      const content = document.getElementById('flowView');
      const dataUrl = 'data:text/plain;charset=utf-8,' + encodeURIComponent(
        JSON.stringify(state.items, null, 2)
      );
      const link = document.createElement('a');
      link.download = 'roadmap-data.json';
      link.href = dataUrl;
      link.click();
    }

    function syncData() {
      if (CONFIG.SUPABASE_ENABLED) {
        saveToSupabase().then(() => {
          alert('Data synced to Supabase!');
        }).catch(err => {
          alert('Sync failed: ' + err.message);
        });
      } else {
        alert('Supabase not configured. Check CONFIG section.');
      }
    }

    function toggleDependencies() {
      state.showDependencies = !state.showDependencies;
      const btn = document.getElementById('depsBtn');
      if (btn) {
        btn.textContent = state.showDependencies ? '🔗 Hide Dependencies' : '🔗 Show Dependencies';
        btn.classList.toggle('active', state.showDependencies);
      }
      render();
    }

    function deleteItem(itemId) {
      if (!confirm('Delete this item?')) return;
      
      state.items = state.items.filter(item => item.id !== itemId);
      state.coach.selectedItemId = null;
      saveState();
      render();
      updateCoachPanel();
    }

    function closeEditor() {
      const drawer = document.getElementById('drawer');
      drawer.classList.remove('open');
      currentEdit = null;
    }

    function toggleCoach() {
      state.coach.active = !state.coach.active;
      const coach = document.querySelector('.coach-window');
      coach.classList.toggle('open', state.coach.active);
      
      if (state.coach.active) {
        updateCoachPanel();
      }
    }

    function openEditor(itemId) {
      const item = state.items.find(x => x.id === itemId);
      if (!item) return;
      
      currentEdit = item;
      document.getElementById('f-title').value = item.title;
      document.getElementById('f-desc').value = item.desc;
      document.getElementById('f-status').value = item.status;
      document.getElementById('f-milestone').value = item.milestone || 'mvp';
      document.getElementById('f-lane').value = item.lane || 'PDF Engine';
      document.getElementById('f-tags').value = (item.tags || []).join(', ');
      document.getElementById('f-deps').value = (item.deps || []).join(', ');
      
      drawer.classList.add('open');
    }

    function closeEditor() {
      drawer.classList.remove('open');
      currentEdit = null;
    }

    function toggleCoach() {
      state.coach.active = !state.coach.active;
      const window = document.getElementById('coachWindow');
      if (state.coach.active) {
        window.classList.add('open');
        document.getElementById('coach-context').innerHTML = `
          <h4>🎯 Quick Overview</h4>
          <p>Total items: ${state.items.length}</p>
          <p>In progress: ${state.items.filter(x => x.status === 'progress').length}</p>
          <p>Completed: ${state.items.filter(x => x.status === 'done').length}</p>
        `;
      } else {
        window.classList.remove('open');
      }
    }

    // ============== COACH SYSTEM ==============
    function isBlocked(item) {
      return item.tags?.includes('blocked') || 
             (item.deps || []).some(depId => {
               const dep = state.items.find(x => x.id === depId);
               return dep && dep.status !== 'done';
             });
    }

    function scoreItem(item) {
      let score = 0;
      
      // Base priority scoring
      if (item.tags?.includes('priority')) score += 15;
      if (item.tags?.includes('urgent')) score += 20;
      
      // Development flow scoring - foundational items first
      if (item.lane === 'PDF Engine') score += 12; // Core engine first
      if (item.lane === 'AI Engine') score += 10; // AI capabilities second
      if (item.lane === 'Security') score += 8; // Security early
      if (item.lane === 'UI/UX') score += 5; // UI after core functionality
      if (item.lane === 'Performance') score += 3; // Optimization later
      
      // Milestone-based scoring - MVP items prioritized
      if (item.milestone === 'mvp') score += 25;
      if (item.milestone === 'beta') score += 15;
      if (item.milestone === 'v1.0') score += 10;
      if (item.milestone === 'future') score += 2;
      
      // Status scoring
      if (item.status === 'planned') score += 8;
      if (item.status === 'progress') score += 30; // Continue working items
      
      // Dependency scoring - items with fewer dependencies score higher
      const depCount = (item.deps || []).length;
      if (depCount === 0) score += 10; // Independent items preferred
      score -= depCount * 3;
      
      // Blocked items penalty
      if (isBlocked(item)) score -= 50;
      
      // Strategic item bonuses
      if (item.title.toLowerCase().includes('infrastructure')) score += 8;
      if (item.title.toLowerCase().includes('core') || item.title.toLowerCase().includes('engine')) score += 12;
      if (item.title.toLowerCase().includes('api') || item.title.toLowerCase().includes('integration')) score += 6;
      
      return score;
    }

    function nextSuggestions() {
      const available = state.items.filter(item => 
        item.status === 'planned' && !isBlocked(item)
      );
      
      const inProgress = state.items.filter(item => item.status === 'progress');
      
      // If too many items in progress, suggest completing existing work
      if (inProgress.length >= 3) {
        return [{
          title: '⚠️ Focus on Completion',
          desc: `You have ${inProgress.length} items in progress. Consider completing some before starting new work.`,
          suggestion: 'complete_existing',
          items: inProgress.slice(0, 2)
        }];
      }
      
      // Score and sort available items
      const scored = available
        .map(item => ({ item, score: scoreItem(item) }))
        .sort((a, b) => b.score - a.score);
      
      // Build smart suggestions with reasoning
      const suggestions = [];
      
      if (scored.length > 0) {
        const topItem = scored[0].item;
        let reasoning = '';
        
        if (topItem.milestone === 'mvp') reasoning += 'MVP priority. ';
        if (topItem.lane === 'PDF Engine') reasoning += 'Core foundation needed. ';
        if (topItem.lane === 'AI Engine') reasoning += 'Key differentiator. ';
        if ((topItem.deps || []).length === 0) reasoning += 'No dependencies. ';
        if (topItem.tags?.includes('priority')) reasoning += 'High priority. ';
        
        suggestions.push({
          ...topItem,
          reasoning: reasoning || 'Good next step for development flow.'
        });
      }
      
      // Add workflow-specific suggestions
      if (scored.length > 1) {
        const secondItem = scored[1].item;
        if (secondItem.lane !== scored[0].item.lane) {
          suggestions.push({
            ...secondItem,
            reasoning: `Alternative in ${secondItem.lane} track.`
          });
        }
      }
      
      // Add foundation suggestions if missing
      const coreItems = available.filter(item => 
        item.lane === 'PDF Engine' && item.milestone === 'mvp'
      );
      if (coreItems.length > 0 && suggestions.length < 3) {
        const coreItem = coreItems[0];
        if (!suggestions.find(s => s.id === coreItem.id)) {
          suggestions.push({
            ...coreItem,
            reasoning: 'Critical foundation component.'
          });
        }
      }
      
      return suggestions.slice(0, 3);
    }

    function renderCoachTop() {
      const totalItems = state.items.length;
      const completed = state.items.filter(x => x.status === 'done').length;
      const inProgress = state.items.filter(x => x.status === 'progress').length;
      const blocked = state.items.filter(x => isBlocked(x)).length;
      const progress = totalItems > 0 ? Math.round((completed / totalItems) * 100) : 0;

      return `
        <h4>📊 Project Overview</h4>
        <p><strong>Progress:</strong> ${progress}% (${completed}/${totalItems} completed)</p>
        <p><strong>Active:</strong> ${inProgress} in progress, ${blocked} blocked</p>
      `;
    }

    function renderCoachContext() {
      if (!state.coach.selectedItemId) {
        const suggestions = nextSuggestions();
        if (suggestions.length === 0) {
          return `
            <h4>🎉 All Clear!</h4>
            <p>No immediate actions needed. Great work!</p>
          `;
        }
        
        // Handle special suggestion types
        if (suggestions[0].suggestion === 'complete_existing') {
          return `
            <h4>⚠️ Focus Recommendation</h4>
            <p style="color: #d97706; font-weight: 500;">${suggestions[0].desc}</p>
            <div style="margin-top: 12px;">
              <strong>Complete these first:</strong>
              ${suggestions[0].items.map(item => `
                <div style="margin: 6px 0; padding: 8px; background: #fef3c7; border-radius: 6px; border-left: 3px solid #f59e0b;">
                  <strong>${item.title}</strong><br>
                  <small style="color: #92400e;">${item.lane} • ${item.milestone}</small>
                </div>
              `).join('')}
            </div>
          `;
        }
        
        return `
          <h4>🎯 Strategic Next Steps</h4>
          <p style="font-size: 13px; color: #6b7280; margin-bottom: 12px;">Based on development workflow and dependencies:</p>
          ${suggestions.map(item => `
            <div style="margin: 10px 0; padding: 10px; background: #f0fdf4; border-radius: 6px; border-left: 3px solid #22c55e;">
              <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 4px;">
                <strong style="color: #1f2937; font-size: 14px;">${item.title}</strong>
                <button onclick="showCoachForItem('${item.id}')" style="background: #22c55e; color: white; border: none; padding: 2px 6px; border-radius: 3px; font-size: 10px; cursor: pointer;">View</button>
              </div>
              <div style="font-size: 12px; color: #6b7280; margin-bottom: 6px;">${item.lane} • ${item.milestone}</div>
              <div style="font-size: 11px; color: #059669; font-style: italic;">${item.reasoning}</div>
            </div>
          `).join('')}
        `;
      }

      const item = state.items.find(x => x.id === state.coach.selectedItemId);
      if (!item) return '<p>Item not found.</p>';

      const blockedBy = (item.deps || []).map(depId => {
        const dep = state.items.find(x => x.id === depId);
        return dep && dep.status !== 'done' ? dep : null;
      }).filter(Boolean);

      return `
        <h4>🎯 ${item.title}</h4>
        <p><strong>Status:</strong> ${item.status}</p>
        <p><strong>Lane:</strong> ${item.lane}</p>
        <p><strong>Milestone:</strong> ${item.milestone}</p>
        ${blockedBy.length > 0 ? `
          <p><strong>Blocked by:</strong></p>
          ${blockedBy.map(dep => `
            <div style="margin: 4px 0; padding: 6px; background: #fee2e2; border-radius: 4px;">
              <small>${dep.title} (${dep.status})</small>
            </div>
          `).join('')}
        ` : ''}
      `;
    }

    function renderCoachOps() {
      if (!state.coach.selectedItemId) {
        return `
          <h4>⚡ Quick Actions</h4>
          <div class="coach-ops">
            <button class="coach-op-btn" onclick="updateCoachPanel()">🔄 Refresh Analysis</button>
          </div>
        `;
      }

      const item = state.items.find(x => x.id === state.coach.selectedItemId);
      if (!item) return '';

      const ops = [];
      
      if (item.status === 'planned' && !isBlocked(item)) {
        ops.push({ type: 'start', label: '▶️ Start Work', itemId: item.id });
      }
      
      if (item.status === 'progress') {
        ops.push({ type: 'complete', label: '✅ Mark Complete', itemId: item.id });
      }
      
      if (!item.tags?.includes('blocked')) {
        ops.push({ type: 'block', label: '🚫 Mark Blocked', itemId: item.id });
      }
      
      if (!item.tags?.includes('priority')) {
        ops.push({ type: 'prioritize', label: '⭐ Prioritize', itemId: item.id });
      }

      return `
        <h4>⚡ Suggested Actions</h4>
        <div class="coach-ops">
          ${ops.map(op => `
            <button class="coach-op-btn" onclick="applyCoachOperation('${op.type}', '${op.itemId}')">${op.label}</button>
          `).join('')}
        </div>
      `;
    }

    function updateCoachPanel() {
      if (!state.coach.active) return;
      
      document.getElementById('coach-top').innerHTML = renderCoachTop();
      document.getElementById('coach-context').innerHTML = renderCoachContext();
      document.getElementById('coach-ops').innerHTML = renderCoachOps();
    }

    function showCoachForItem(itemId) {
      state.coach.selectedItemId = itemId;
      state.coach.active = true;
      toggleCoach();
      updateCoachPanel();
    }

    function applyCoachOperation(type, itemId) {
      const item = state.items.find(x => x.id === itemId);
      if (!item) return;

      switch (type) {
        case 'start':
          item.status = 'progress';
          break;
        case 'complete':
          item.status = 'done';
          break;
        case 'block':
          if (!item.tags) item.tags = [];
          if (!item.tags.includes('blocked')) item.tags.push('blocked');
          break;
        case 'prioritize':
          if (!item.tags) item.tags = [];
          if (!item.tags.includes('priority')) item.tags.push('priority');
          break;
      }

      saveState();
      render();
      updateCoachPanel();
    }

    // ============== VS CODE INTEGRATION API ==============
    // Expose functions for external script access
    window.roadmapAPI = {
      // Get all items
      getAllItems: () => state.items,
      
      // Find item by ID or title
      findItem: (search) => {
        if (search.startsWith('item-')) {
          return state.items.find(item => item.id === search);
        }
        return state.items.find(item => 
          item.title.toLowerCase().includes(search.toLowerCase())
        );
      },
      
      // Update item status
      updateStatus: (itemId, newStatus) => {
        const item = state.items.find(x => x.id === itemId);
        if (!item) return false;
        
        const oldStatus = item.status;
        item.status = newStatus;
        
        // Add automatic tag management
        if (newStatus === 'blocked' && !item.tags?.includes('blocked')) {
          if (!item.tags) item.tags = [];
          item.tags.push('blocked');
        } else if (oldStatus === 'blocked' && newStatus !== 'blocked') {
          if (item.tags) {
            item.tags = item.tags.filter(tag => tag !== 'blocked');
          }
        }
        
        saveState();
        render();
        updateCoachPanel();
        
        console.log(`✅ Updated "${item.title}" from ${oldStatus} to ${newStatus}`);
        return true;
      },
      
      // Bulk status update
      updateMultiple: (updates) => {
        let updated = 0;
        updates.forEach(update => {
          if (window.roadmapAPI.updateStatus(update.id, update.status)) {
            updated++;
          }
        });
        return updated;
      },
      
      // Get development flow suggestions
      getNextSteps: () => nextSuggestions(),
      
      // Export current state
      exportData: () => ({
        items: state.items,
        timestamp: new Date().toISOString(),
        version: "1.0"
      })
    };

    // Listen for external update events (for real-time updates)
    window.addEventListener('message', (event) => {
      if (event.data.type === 'ROADMAP_UPDATE') {
        const { itemId, status } = event.data;
        window.roadmapAPI.updateStatus(itemId, status);
      }
    });

    // ============== INITIALIZATION ==============
    document.addEventListener('DOMContentLoaded', () => {
      // Basic event handlers
      document.getElementById('closeDrawer').addEventListener('click', closeEditor);
      document.getElementById('coachBtn').addEventListener('click', toggleCoach);
      document.querySelector('.coach-close').addEventListener('click', toggleCoach);
      
      document.getElementById('saveItem').addEventListener('click', () => {
        if (!currentEdit) return;
        currentEdit.title = document.getElementById('f-title').value;
        currentEdit.desc = document.getElementById('f-desc').value;
        currentEdit.status = document.getElementById('f-status').value;
        currentEdit.milestone = document.getElementById('f-milestone').value;
        currentEdit.lane = document.getElementById('f-lane').value;
        const tags = document.getElementById('f-tags').value;
        const deps = document.getElementById('f-deps').value;
        currentEdit.tags = tags ? tags.split(',').map(s => s.trim()).filter(Boolean) : [];
        currentEdit.deps = deps ? deps.split(',').map(s => s.trim()).filter(Boolean) : [];
        saveState();
        render();
        closeEditor();
      });
      
      document.getElementById('addItemBtn').addEventListener('click', () => {
        const id = 'item-' + Date.now();
        state.items.push({
          id, title: 'New Item', desc: '', status: 'planned', milestone: 'mvp', lane: 'PDF Engine', tags: [], deps: []
        });
        saveState();
        render();
        openEditor(id);
      });

      // Additional control handlers
      document.getElementById('exportBtn').addEventListener('click', exportToPNG);
      document.getElementById('syncBtn').addEventListener('click', syncData);
      document.getElementById('depsBtn').addEventListener('click', toggleDependencies);

      // Card click handlers
      document.addEventListener('click', (e) => {
        const card = e.target.closest('.card');
        if (card && !e.target.classList.contains('coach-suggest-btn')) {
          openEditor(card.dataset.id);
        }
      });

      // Initial render
      render();
    });
  </script>
</body>
</html>